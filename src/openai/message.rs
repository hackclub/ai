use serde::{Deserialize, Serialize};

use crate::openai::{functions, tools};

/// Represents a single message in the chat conversation.
#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(tag = "role")]
#[serde(rename_all = "lowercase")]
pub enum ChatCompletionMessage {
    #[serde(alias = "developer")]
    System {
        /// The contents of the system message.
        #[serde(skip_serializing_if = "Option::is_none")]
        content: Option<Content>,

        /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
        #[serde(skip_serializing_if = "Option::is_none")]
        name: Option<String>,

        /// DO NOT USE. This field is present because OpenAI allows it and users send it.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_call_id: Option<String>,
    },
    User {
        /// The contents of the user message.
        #[serde(skip_serializing_if = "Option::is_none")]
        content: Option<Content>,

        /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
        #[serde(skip_serializing_if = "Option::is_none")]
        name: Option<String>,

        /// DO NOT USE. This field is present because OpenAI allows it and users send it.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_call_id: Option<String>,
    },
    Assistant {
        /// The contents of the assistant message. Required unless tool_calls or function_call is specified.
        #[serde(skip_serializing_if = "Option::is_none")]
        content: Option<Content>,

        /// Deprecated and replaced by tool_calls. The name and arguments of a function that should be called, as generated by the model.
        #[serde(skip_serializing_if = "Option::is_none")]
        #[deprecated(
            note = "Deprecated and replaced by tool_calls. The name and arguments of a function that should be called, as generated by the model."
        )]
        function_call: Option<functions::FunctionCall>,

        /// An optional name for the participant. Provides the model information to differentiate between participants of the same role.
        #[serde(skip_serializing_if = "Option::is_none")]
        name: Option<String>,

        /// The reasoning output by the assistant if reasoning_format was set to 'parsed'. This field is only useable with qwen3 models.
        #[serde(skip_serializing_if = "Option::is_none")]
        reasoning: Option<String>,

        /// DO NOT USE. This field is present because OpenAI allows it and users send it.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_call_id: Option<String>,

        /// The tool calls generated by the model, such as function calls.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_calls: Option<Vec<tools::ToolCall>>,
    },
    Tool {
        /// The contents of the tool message.
        #[serde(skip_serializing_if = "Option::is_none")]
        content: Option<Content>,

        /// DO NOT USE. This field is present because OpenAI allows it and users send it.
        #[serde(skip_serializing_if = "Option::is_none")]
        name: Option<String>,

        /// Tool call that this message is responding to.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_call_id: Option<String>,
    },

    #[deprecated(note = "Deprecated and replaced by tool")]
    Function {
        /// The contents of the function message.
        #[serde(skip_serializing_if = "Option::is_none")]
        content: Option<String>,

        /// The name of the function to call.
        #[serde(skip_serializing_if = "Option::is_none")]
        name: Option<String>,

        /// DO NOT USE. This field is present because OpenAI allows it and users send it.
        #[serde(skip_serializing_if = "Option::is_none")]
        tool_call_id: Option<String>,
    },
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(untagged)]
pub enum Content {
    Text(String),
    Parts(Vec<Part>),
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "lowercase", tag = "type")]
pub enum Part {
    Text {
        #[serde(skip_serializing_if = "Option::is_none")]
        text: Option<String>,
    },

    #[serde(rename = "image_url")]
    Image {
        #[serde(skip_serializing_if = "Option::is_none")]
        image_url: Option<ImageUrl>,
    },
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct ImageUrl {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub detail: Option<ImageDetail>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Debug, Clone, Default)]
#[serde(rename_all = "lowercase")]
pub enum ImageDetail {
    #[default]
    Auto,
    Low,
    High,
}
